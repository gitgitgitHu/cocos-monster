{"version":3,"sources":["assets/scripts/Game.js","assets/scripts/Player.js","assets/scripts/Star.js"],"names":["Player","require","cc","Class","extends","Component","properties","starPrefab","default","type","Prefab","maxStarDuration","minStarDuration","ground","Node","player","scoreDisplay","Label","scoreAudio","AudioClip","btnNode","gameOverNode","onLoad","this","groundY","y","height","enabled","currentStar","currentStarX","timer","starDuration","starPool","NodePool","onStartGame","score","string","x","active","startMoveAt","v2","spawnNewStar","newStar","size","get","instantiate","node","addChild","setPosition","getNewStarPosition","getComponent","init","Math","random","width","randX","randY","jumpHeight","maxX","despawnStar","star","put","gainScore","audioEngine","playEffect","update","dt","gameOver","stopMove","destroy","jumpDuration","maxMoveSpeed","accel","jumpAudio","setJumpAction","jumpUp","moveBy","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","callback","callFunc","playJumpSound","repeatForever","sequence","pos","xSpeed","runAction","jumpAction","accLeft","accRight","systemEvent","on","SystemEvent","EventType","KEY_DOWN","onKeyDown","KEY_UP","onKeyUp","touchReceiver","Canvas","instance","onTouchStart","onTouchEnd","event","keyCode","macro","KEY","a","left","d","right","getLocation","winSize","abs","parent","getCenterPos","stopAllActions","onDestroy","off","pickRadius","game","opacity","reuse","getPlayerDistance","onPicked","opacityRatio","floor","playerPos","position","sub","mag"],"mappings":"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","sourcesContent":["const Player = require('Player');\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // 这个属性引用了星星预制资源\n        starPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        // 星星产生后消失时间的随机范围\n        maxStarDuration: 0,\n        minStarDuration: 0,\n        // 地面节点，用于确定星星生成的高度\n        ground: {\n            default: null,\n            type: cc.Node\n        },\n        // player 节点，用于获取主角弹跳的高度，和控制主角行动开关\n        player: {\n            default: null,\n            type: Player\n        },\n        // 分数\n        scoreDisplay: {\n            default: null,\n            type: cc.Label\n        },\n        // 得分音效资源\n        scoreAudio: {\n            default: null,\n            type: cc.AudioClip\n        },\n        // 开始按钮\n        btnNode: {\n            default: null,\n            type: cc.Node\n        },\n        //游戏结束文字\n        gameOverNode: {\n            default: null,\n            type: cc.Node\n        }\n    },\n\n    onLoad: function() {\n        // 获取地平面的 y 轴坐标\n        this.groundY = this.ground.y + this.ground.height / 2;\n        // 节点下的 y 属性对应的是锚点所在的 y 坐标，因为锚点默认在节点的中心，所以需要加上地面高度的一半才是地面的 y 坐标\n\n        //是否每帧执行该组件的 update 方法，同时也用来控制渲染组件是否显示\n        this.enabled = false;\n\n        this.currentStar = null; // 记录最后一个星星的x坐标\n        this.currentStarX = 0;\n        // 初始化计时器\n        this.timer = 0;\n        this.starDuration = 0;\n        //初始化星星池\n        this.starPool = new cc.NodePool('Star');\n    },\n\n    onStartGame: function() {\n        this.enabled = true;\n        // 初始化分数\n        this.score = 0;\n        this.scoreDisplay.string = 'Score: 0';\n        // 让按钮跑到屏幕外\n        this.btnNode.x = 3000;\n        this.gameOverNode.active = false;\n        // 重置怪兽的位置和移速\n        this.player.startMoveAt(cc.v2(0, this.groundY));\n        // 生成一个新的星星\n        this.spawnNewStar();\n    },\n\n    spawnNewStar: function() {\n        var newStar = null;\n        // 使用给定的模板在场景中生成一个新节点\n        if (this.starPool.size() > 0) {\n            newStar = this.starPool.get(this);\n        } else {\n            newStar = cc.instantiate(this.starPrefab);\n            // instantiate克隆指定的任意类型的对象，或者从 Prefab 实例化出新节点，返回值为 Node 或者 Object\n        }\n        // 将新增的节点添加到 Canvas 节点下面\n        this.node.addChild(newStar);\n        // node.addChild将新节点建立在该节点的下一级，所以新节点的显示效果在该节点之上\n\n        // 为星星设置一个随机位置\n        newStar.setPosition(this.getNewStarPosition());\n        // setPosition设置节点在父节点坐标系中的位置，可以通过两种方式设置坐标点。一是传入两个数值 x 和 y，二是传入类型为 cc.Vec2 的对象\n\n        // 在星星组件上暂存 Game 对象的引用\n        newStar.getComponent('Star').init(this);\n        // getComponent得到该节点上挂载的组件引用\n\n        // 重置计时器，根据消失时间范围随机取一个值\n        this.starDuration =\n            this.minStarDuration +\n            Math.random() * (this.maxStarDuration - this.minStarDuration);\n        this.timer = 0;\n        this.currentStar = newStar;\n    },\n    // 获取星星坐标\n    getNewStarPosition: function() {\n        // 如果没有星星，设置随机x\n        if (!this.currentStar) {\n            this.currentStarX =\n                ((Math.random() - 0.5) * 2 * this.node.width) / 2;\n        }\n        var randX = 0;\n        // 根据地平面位置和主角跳跃高度，随机得到一个星星的 y 坐标\n        var randY = this.groundY + Math.random() * this.player.jumpHeight + 50;\n        // 根据屏幕宽度，随机得到一个星星 x 坐标\n        var maxX = this.node.width / 2;\n        randX = (Math.random() - 0.5) * 2 * maxX;\n        if (this.currentStarX >= 0) {\n            randX = -Math.random() * maxX;\n        } else {\n            randX = Math.random() * maxX;\n        }\n        this.currentStarX = randX;\n        // 返回星星坐标\n        return cc.v2(randX, randY);\n    },\n    // 让star调用生成新星星\n    despawnStar(star) {\n        this.starPool.put(star);\n        this.spawnNewStar();\n    },\n    gainScore: function() {\n        this.score += 1;\n        // 更新分数的文字\n        this.scoreDisplay.string = 'Score: ' + this.score;\n        // 播放得分音效\n        cc.audioEngine.playEffect(this.scoreAudio, false);\n    },\n    update: function(dt) {\n        // 每帧更新计时器，超过限度还没有生成新的星星就会调用游戏失败逻辑\n        if (this.timer > this.starDuration) {\n            this.gameOver();\n            return;\n        }\n        this.timer += dt;\n    },\n\n    gameOver: function() {\n        this.gameOverNode.active = true;\n        this.player.enabled = false;\n        this.player.stopMove();\n        this.currentStar.destroy();\n        this.btnNode.x = 0;\n        // cc.director.loadScene('game');\n        /* 管理你的游戏逻辑流程的单例对象\n        由于 cc.director 是一个单例，你不需要调用任何构造函数或创建函数\n        使用它的标准方法是调用 cc.director.methodName()\n        这里就是重新加载游戏场景 game，也就是游戏重新开始\n        */\n    }\n});\n","// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\n// cc是cocos creator的简称\n// Cocos 引擎的主要命名空间，引擎代码中所有的类、函数、属性和常量都在这个命名空间中定义。\ncc.Class({\n    extends: cc.Component,\n\n    // 一个节点具有的属性都需要写在 properties 代码块中\n    // 这些属性将规定主角的移动方式，在代码中我们不需要关心这些数值是多少，因为我们之后会直接在属性检查器中设置这些数值\n    // 以后在游戏制作过程中，我们可以将需要随时调整的属性都放在 properties 中。\n    properties: {\n        // 主角跳跃高度\n        jumpHeight: 0,\n        // 主角跳跃持续时间\n        jumpDuration: 0,\n        // 最大移动速度\n        maxMoveSpeed: 0,\n        // 加速度\n        accel: 0,\n        //跳跃音效\n        jumpAudio: {\n            default: null,\n            type: cc.AudioClip\n        }\n    },\n    setJumpAction: function() {\n        // 跳跃上升\n\n        /* moveBy()\n        在规定的时间内移动指定的一段距离\n        第一个参数就是我们之前定义主角属性中的跳跃时间\n        第二个参数是一个 Vec2（表示 2D 向量和坐标）类型的对象*/\n        let jumpUp = cc\n            .moveBy(this.jumpDuration, cc.v2(0, this.jumpHeight))\n            .easing(cc.easeCubicActionOut()); //缓动运动\n        // 下落\n        let jumpDown = cc\n            .moveBy(this.jumpDuration, cc.v2(0, -this.jumpHeight))\n            .easing(cc.easeCubicActionIn());\n        // 添加一个回调函数，用于在动作结束时调用我们定义的其他方法\n        var callback = cc.callFunc(this.playJumpSound, this);\n        // 不断重复，而且每次完成落地动作后调用回调来播放声音\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\n    },\n    playJumpSound: function() {\n        // 调用声音引擎播放声音\n        cc.audioEngine.playEffect(this.jumpAudio, false);\n    },\n\n    startMoveAt: function(pos) {\n        this.enabled = true;\n        this.xSpeed = 0;\n        this.node.setPosition(pos);\n        this.node.runAction(this.setJumpAction()); //runAction执行并返回该执行的动作。\n    },\n    // 在场景加载后立刻执行\n    onLoad: function() {\n        this.enabled = false;\n        // 初始化跳跃动作\n        this.jumpAction = this.setJumpAction();\n        // 加速度方向开关\n        this.accLeft = false;\n        this.accRight = false;\n        // 主角当前水平方向速度\n        this.xSpeed = 0;\n        // 初始化键盘输入监听\n        cc.systemEvent.on(\n            //systemEvent系统事件，目前支持按键事件和重力感应事件\n            cc.SystemEvent.EventType.KEY_DOWN,\n            this.onKeyDown,\n            this\n        );\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n        //建立touch监听\n        var touchReceiver = cc.Canvas.instance.node;\n        touchReceiver.on('touchstart', this.onTouchStart, this);\n        touchReceiver.on('touchend', this.onTouchEnd, this);\n    },\n    onKeyDown(event) {\n        switch (event.keyCode) {\n            case cc.macro.KEY.a: //macro.KEY键盘事件的按键值\n            case cc.macro.KEY.left:\n                this.accLeft = true;\n                this.accRight = false;\n                break;\n            case cc.macro.KEY.d:\n            case cc.macro.KEY.right:\n                this.accLeft = false;\n                this.accRight = true;\n                break;\n        }\n    },\n    onKeyUp(event) {\n        switch (event.keyCode) {\n            case cc.macro.KEY.a:\n            case cc.macro.KEY.left:\n                this.accLeft = false;\n                break;\n            case cc.macro.KEY.d:\n            case cc.macro.KEY.right:\n                this.accRight = false;\n                break;\n        }\n    },\n    onTouchStart(event) {\n        var touchLoc = event.getLocation(); //获取鼠标位置对象，对象包含 x 和 y 属性\n        if (touchLoc.x >= cc.winSize.width / 2) {\n            this.accLeft = false;\n            this.accRight = true;\n        } else {\n            this.accLeft = true;\n            this.accRight = false;\n        }\n    },\n\n    onTouchEnd(event) {\n        this.accLeft = false;\n        this.accRight = false;\n    },\n    update: function(dt) {\n        // 根据当前加速度方向每帧更新速度\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n        // 限制主角的速度不能超过最大值\n        if (Math.abs(this.xSpeed) > this.maxMoveSpeed) {\n            // Math.abs返回绝对值\n            this.xSpeed =\n                (this.maxMoveSpeed * this.xSpeed) / Math.abs(this.xSpeed);\n        }\n\n        // 根据当前速度更新主角的位置\n        this.node.x += this.xSpeed * dt;\n        //限制怪兽位置在屏幕中\n        if (this.node.x > this.node.parent.width / 2) {\n            this.node.x = this.node.parent.width / 2;\n            this.xSpeed = 0;\n        } else if (this.node.x < -this.node.parent.width / 2) {\n            this.node.x = -this.node.parent.width / 2;\n            this.xSpeed = 0;\n        }\n    },\n    getCenterPos: function() {\n        var centerPos = cc.v2(this.node.x, this.node.y + this.node.height / 2);\n        return centerPos;\n    },\n\n    stopMove: function() {\n        this.accLeft = false;\n        this.accRight = false;\n        this.xSpeed = 0;\n        this.node.stopAllActions(); // 让节点上的所有 Action 都失效\n    },\n    onDestroy() {\n        // 取消键盘输入监听\n        cc.systemEvent.off(\n            cc.SystemEvent.EventType.KEY_DOWN,\n            this.onKeyDown,\n            this\n        );\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n        //取消touch监听\n        var touchReceiver = cc.Canvas.instance.node;\n        touchReceiver.off('touchstart', this.onTouchStart, this);\n        touchReceiver.off('touchend', this.onTouchEnd, this);\n    }\n});\n","cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // 星星和主角之间的距离小于这个数值时，就会完成收集\n        pickRadius: 0\n    },\n\n    onLoad: function() {\n        this.enabled = false;\n    },\n    init: function(game) {\n        this.game = game;\n        this.enabled = true;\n        this.node.opacity = 255;\n    },\n\n    reuse(game) {\n        this.init(game);\n    },\n    update: function(dt) {\n        // 每帧判断和主角之间的距离是否小于收集距离\n        if (this.getPlayerDistance() < this.pickRadius) {\n            // 调用收集行为\n            this.onPicked();\n            return;\n        }\n        // 根据 Game 脚本中的计时器更新星星的透明度 做出星星消失的效果\n        var opacityRatio = 1 - this.game.timer / this.game.starDuration;\n        var minOpacity = 50;\n        this.node.opacity =\n            minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n    },\n\n    getPlayerDistance: function() {\n        // 根据 player 节点位置判断距离\n        var playerPos = this.game.player.getCenterPos();\n\n        // 根据两点位置计算两点之间距离\n        var dist = this.node.position.sub(playerPos).mag();\n        return dist;\n    },\n\n    onPicked: function() {\n        // 调用 Game 的得分方法\n        this.game.gainScore();\n        this.game.despawnStar(this.node);\n    }\n});\n"],"file":"project.js"}