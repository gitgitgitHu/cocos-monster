{"version":3,"sources":["../../../../assets/scripts/assets/scripts/Game.js"],"names":["Player","require","cc","Class","extends","Component","properties","starPrefab","default","type","Prefab","maxStarDuration","minStarDuration","ground","Node","player","scoreDisplay","Label","scoreAudio","AudioClip","btnNode","gameOverNode","onLoad","groundY","y","height","enabled","currentStar","currentStarX","timer","starDuration","starPool","NodePool","onStartGame","score","string","x","active","startMoveAt","v2","spawnNewStar","newStar","size","get","instantiate","node","addChild","setPosition","getNewStarPosition","getComponent","init","Math","random","width","randX","randY","jumpHeight","maxX","despawnStar","star","put","gainScore","audioEngine","playEffect","update","dt","gameOver","stopMove","destroy"],"mappings":"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","file":"Game.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["const Player = require('Player');\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // 这个属性引用了星星预制资源\n        starPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        // 星星产生后消失时间的随机范围\n        maxStarDuration: 0,\n        minStarDuration: 0,\n        // 地面节点，用于确定星星生成的高度\n        ground: {\n            default: null,\n            type: cc.Node\n        },\n        // player 节点，用于获取主角弹跳的高度，和控制主角行动开关\n        player: {\n            default: null,\n            type: Player\n        },\n        // 分数\n        scoreDisplay: {\n            default: null,\n            type: cc.Label\n        },\n        // 得分音效资源\n        scoreAudio: {\n            default: null,\n            type: cc.AudioClip\n        },\n        // 开始按钮\n        btnNode: {\n            default: null,\n            type: cc.Node\n        },\n        //游戏结束文字\n        gameOverNode: {\n            default: null,\n            type: cc.Node\n        }\n    },\n\n    onLoad: function() {\n        // 获取地平面的 y 轴坐标\n        this.groundY = this.ground.y + this.ground.height / 2;\n        // 节点下的 y 属性对应的是锚点所在的 y 坐标，因为锚点默认在节点的中心，所以需要加上地面高度的一半才是地面的 y 坐标\n\n        //是否每帧执行该组件的 update 方法，同时也用来控制渲染组件是否显示\n        this.enabled = false;\n\n        this.currentStar = null; // 记录最后一个星星的x坐标\n        this.currentStarX = 0;\n        // 初始化计时器\n        this.timer = 0;\n        this.starDuration = 0;\n        //初始化星星池\n        this.starPool = new cc.NodePool('Star');\n    },\n\n    onStartGame: function() {\n        this.enabled = true;\n        // 初始化分数\n        this.score = 0;\n        this.scoreDisplay.string = 'Score: 0';\n        // 让按钮跑到屏幕外\n        this.btnNode.x = 3000;\n        this.gameOverNode.active = false;\n        // 重置怪兽的位置和移速\n        this.player.startMoveAt(cc.v2(0, this.groundY));\n        // 生成一个新的星星\n        this.spawnNewStar();\n    },\n\n    spawnNewStar: function() {\n        var newStar = null;\n        // 使用给定的模板在场景中生成一个新节点\n        if (this.starPool.size() > 0) {\n            newStar = this.starPool.get(this);\n        } else {\n            newStar = cc.instantiate(this.starPrefab);\n            // instantiate克隆指定的任意类型的对象，或者从 Prefab 实例化出新节点，返回值为 Node 或者 Object\n        }\n        // 将新增的节点添加到 Canvas 节点下面\n        this.node.addChild(newStar);\n        // node.addChild将新节点建立在该节点的下一级，所以新节点的显示效果在该节点之上\n\n        // 为星星设置一个随机位置\n        newStar.setPosition(this.getNewStarPosition());\n        // setPosition设置节点在父节点坐标系中的位置，可以通过两种方式设置坐标点。一是传入两个数值 x 和 y，二是传入类型为 cc.Vec2 的对象\n\n        // 在星星组件上暂存 Game 对象的引用\n        newStar.getComponent('Star').init(this);\n        // getComponent得到该节点上挂载的组件引用\n\n        // 重置计时器，根据消失时间范围随机取一个值\n        this.starDuration =\n            this.minStarDuration +\n            Math.random() * (this.maxStarDuration - this.minStarDuration);\n        this.timer = 0;\n        this.currentStar = newStar;\n    },\n    // 获取星星坐标\n    getNewStarPosition: function() {\n        // 如果没有星星，设置随机x\n        if (!this.currentStar) {\n            this.currentStarX =\n                ((Math.random() - 0.5) * 2 * this.node.width) / 2;\n        }\n        var randX = 0;\n        // 根据地平面位置和主角跳跃高度，随机得到一个星星的 y 坐标\n        var randY = this.groundY + Math.random() * this.player.jumpHeight + 50;\n        // 根据屏幕宽度，随机得到一个星星 x 坐标\n        var maxX = this.node.width / 2;\n        randX = (Math.random() - 0.5) * 2 * maxX;\n        if (this.currentStarX >= 0) {\n            randX = -Math.random() * maxX;\n        } else {\n            randX = Math.random() * maxX;\n        }\n        this.currentStarX = randX;\n        // 返回星星坐标\n        return cc.v2(randX, randY);\n    },\n    // 让star调用生成新星星\n    despawnStar(star) {\n        this.starPool.put(star);\n        this.spawnNewStar();\n    },\n    gainScore: function() {\n        this.score += 1;\n        // 更新分数的文字\n        this.scoreDisplay.string = 'Score: ' + this.score;\n        // 播放得分音效\n        cc.audioEngine.playEffect(this.scoreAudio, false);\n    },\n    update: function(dt) {\n        // 每帧更新计时器，超过限度还没有生成新的星星就会调用游戏失败逻辑\n        if (this.timer > this.starDuration) {\n            this.gameOver();\n            return;\n        }\n        this.timer += dt;\n    },\n\n    gameOver: function() {\n        this.gameOverNode.active = true;\n        this.player.enabled = false;\n        this.player.stopMove();\n        this.currentStar.destroy();\n        this.btnNode.x = 0;\n        // cc.director.loadScene('game');\n        /* 管理你的游戏逻辑流程的单例对象\n        由于 cc.director 是一个单例，你不需要调用任何构造函数或创建函数\n        使用它的标准方法是调用 cc.director.methodName()\n        这里就是重新加载游戏场景 game，也就是游戏重新开始\n        */\n    }\n});\n"]}